{"ast":null,"code":"var _jsxFileName = \"/Users/nrodriguez/Documents/challenge-cor/src/components/TaskList/index.jsx\";\nimport React from 'react';\nimport { array, func, string } from 'prop-types';\nimport TaskData from '../TaskData';\nimport EmptyState from '../EmptyState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst namespace = 'tasklist';\n\nconst TaskList = _ref => {\n  let {\n    list,\n    setList,\n    priorityFilter,\n    statusFilter\n  } = _ref;\n  console.log('Prioridad', priorityFilter);\n  console.log('Estado', statusFilter);\n\n  const onChangeStatus = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const updateList = list.map(item => ({ ...item,\n      status: item.id === name ? value : item.done\n    }));\n    setList(updateList);\n  };\n\n  const todoItems = list.filter(item => !(statusFilter !== 'all' && item.status !== statusFilter || priorityFilter !== 'all' && item.priority !== priorityFilter)).map(filteredItem => {\n    return /*#__PURE__*/_jsxDEV(TaskData, {\n      data: filteredItem,\n      onChange: onChangeStatus\n    }, filteredItem.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  });\n\n  const renderResult = () => {\n    if (list.length > 0) {\n      console.log(todoItems);\n\n      if (todoItems.length > 0) {\n        return todoItems;\n      } else {\n        return /*#__PURE__*/_jsxDEV(EmptyState, {\n          text: \"No se encontro ningun resultado\",\n          image: \"no-results.jpg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this);\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(EmptyState, {\n        text: \"No hay tareas cargadas\",\n        image: \"no-tasks.jpg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${namespace}`,\n    children: renderResult()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TaskList;\nTaskList.propTypes = {\n  list: array.isRequired,\n  setList: func.isRequired,\n  priorityFilter: string.isRequired,\n  statusFilter: string.isRequired\n};\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/Users/nrodriguez/Documents/challenge-cor/src/components/TaskList/index.jsx"],"names":["React","array","func","string","TaskData","EmptyState","namespace","TaskList","list","setList","priorityFilter","statusFilter","console","log","onChangeStatus","e","name","value","target","updateList","map","item","status","id","done","todoItems","filter","priority","filteredItem","renderResult","length","propTypes","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,QAAoC,YAApC;AAEA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,MAAMC,SAAS,GAAG,UAAlB;;AAEA,MAAMC,QAAQ,GAAG,QAAqD;AAAA,MAApD;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,cAAjB;AAAiCC,IAAAA;AAAjC,GAAoD;AACpEC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,cAAzB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,YAAtB;;AACA,QAAMG,cAAc,GAAGC,CAAC,IAAI;AAC1B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACA,UAAMC,UAAU,GAAGX,IAAI,CAACY,GAAL,CAASC,IAAI,KAAK,EACnC,GAAGA,IADgC;AAEnCC,MAAAA,MAAM,EAAED,IAAI,CAACE,EAAL,KAAYP,IAAZ,GAAmBC,KAAnB,GAA2BI,IAAI,CAACG;AAFL,KAAL,CAAb,CAAnB;AAIAf,IAAAA,OAAO,CAACU,UAAD,CAAP;AACD,GAPD;;AASA,QAAMM,SAAS,GAAGjB,IAAI,CAACkB,MAAL,CAAYL,IAAI,IAChC,EAAGV,YAAY,KAAK,KAAjB,IAA0BU,IAAI,CAACC,MAAL,KAAgBX,YAA3C,IACDD,cAAc,KAAK,KAAnB,IAA4BW,IAAI,CAACM,QAAL,KAAkBjB,cAD/C,CADgB,EAGfU,GAHe,CAGXQ,YAAY,IAAI;AACrB,wBAAQ,QAAC,QAAD;AAAgC,MAAA,IAAI,EAAEA,YAAtC;AAAoD,MAAA,QAAQ,EAAEd;AAA9D,OAAec,YAAY,CAACL,EAA5B;AAAA;AAAA;AAAA;AAAA,YAAR;AACD,GALiB,CAAlB;;AAOA,QAAMM,YAAY,GAAG,MAAM;AACzB,QAAIrB,IAAI,CAACsB,MAAL,GAAc,CAAlB,EAAqB;AACnBlB,MAAAA,OAAO,CAACC,GAAR,CAAYY,SAAZ;;AACA,UAAIA,SAAS,CAACK,MAAV,GAAmB,CAAvB,EAA0B;AACxB,eAAOL,SAAP;AACD,OAFD,MAEO;AACL,4BAAQ,QAAC,UAAD;AAAY,UAAA,IAAI,EAAC,iCAAjB;AAAmD,UAAA,KAAK,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA,gBAAR;AACD;AACF,KAPD,MAOO;AACL,0BAAQ,QAAC,UAAD;AAAY,QAAA,IAAI,EAAC,wBAAjB;AAA0C,QAAA,KAAK,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,cAAR;AACD;AACF,GAXD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAG,GAAEnB,SAAU,EAA7B;AAAA,cACGuB,YAAY;AADf;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CArCD;;KAAMtB,Q;AAuCNA,QAAQ,CAACwB,SAAT,GAAqB;AACnBvB,EAAAA,IAAI,EAAEP,KAAK,CAAC+B,UADO;AAEnBvB,EAAAA,OAAO,EAAEP,IAAI,CAAC8B,UAFK;AAGnBtB,EAAAA,cAAc,EAAEP,MAAM,CAAC6B,UAHJ;AAInBrB,EAAAA,YAAY,EAAER,MAAM,CAAC6B;AAJF,CAArB;AAOA,eAAezB,QAAf","sourcesContent":["import React from 'react'\nimport { array, func, string } from 'prop-types'\n\nimport TaskData from '../TaskData'\nimport EmptyState from '../EmptyState'\n\nconst namespace = 'tasklist'\n\nconst TaskList = ({ list, setList, priorityFilter, statusFilter }) => {\n  console.log('Prioridad', priorityFilter)\n  console.log('Estado', statusFilter)\n  const onChangeStatus = e => {\n    const { name, value } = e.target\n    const updateList = list.map(item => ({\n      ...item,\n      status: item.id === name ? value : item.done\n    }))\n    setList(updateList)\n  }\n\n  const todoItems = list.filter(item => (\n    !((statusFilter !== 'all' && item.status !== statusFilter) ||\n    (priorityFilter !== 'all' && item.priority !== priorityFilter))\n  )).map(filteredItem => {\n    return (<TaskData key={filteredItem.id} data={filteredItem} onChange={onChangeStatus} />)\n  })\n\n  const renderResult = () => {\n    if (list.length > 0) {\n      console.log(todoItems)\n      if (todoItems.length > 0) {\n        return todoItems\n      } else {\n        return (<EmptyState text=\"No se encontro ningun resultado\" image=\"no-results.jpg\" />)\n      }\n    } else {\n      return (<EmptyState text=\"No hay tareas cargadas\" image=\"no-tasks.jpg\" />)\n    }\n  }\n\n  return (\n    <div className={`${namespace}`}>\n      {renderResult()}\n    </div>\n  )\n}\n\nTaskList.propTypes = {\n  list: array.isRequired,\n  setList: func.isRequired,\n  priorityFilter: string.isRequired,\n  statusFilter: string.isRequired\n}\n\nexport default TaskList\n"]},"metadata":{},"sourceType":"module"}