{"ast":null,"code":"var _jsxFileName = \"/Users/nrodriguez/Documents/challenge-cor/src/components/TaskList/index.jsx\";\nimport React from 'react';\nimport { array, func } from 'prop-types';\nimport TaskData from '../TaskData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst namespace = 'tasklist';\n\nconst TaskList = _ref => {\n  let {\n    list,\n    setList,\n    priorityFilter,\n    statusFilter\n  } = _ref;\n\n  const onChangeStatus = e => {\n    const {\n      name,\n      checked\n    } = e.target;\n    const updateList = list.map(item => ({ ...item,\n      done: item.id === name ? checked : item.done\n    }));\n    setList(updateList);\n  };\n\n  const todoItems = list.map(item => {\n    item.filter(function (item) {\n      if (item.status !== statusFilter) {\n        return false;\n      }\n\n      if (item.priority !== priorityFilter) {\n        return false;\n      }\n\n      return /*#__PURE__*/_jsxDEV(TaskData, {\n        data: item,\n        onChange: onChangeStatus\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 15\n      }, this);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${namespace}`,\n    children: list.length ? todoItems : 'No tasks'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TaskList;\nTaskList.propTypes = {\n  list: array.isRequired,\n  setList: func.isRequired,\n  priorityFilter: func.isRequired,\n  statusFilter: func.isRequired\n};\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/Users/nrodriguez/Documents/challenge-cor/src/components/TaskList/index.jsx"],"names":["React","array","func","TaskData","namespace","TaskList","list","setList","priorityFilter","statusFilter","onChangeStatus","e","name","checked","target","updateList","map","item","done","id","todoItems","filter","status","priority","length","propTypes","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,YAA5B;AAEA,OAAOC,QAAP,MAAqB,aAArB;;AAEA,MAAMC,SAAS,GAAG,UAAlB;;AAEA,MAAMC,QAAQ,GAAG,QAAqD;AAAA,MAApD;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,cAAjB;AAAiCC,IAAAA;AAAjC,GAAoD;;AACpE,QAAMC,cAAc,GAAGC,CAAC,IAAI;AAC1B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBF,CAAC,CAACG,MAA5B;AACA,UAAMC,UAAU,GAAGT,IAAI,CAACU,GAAL,CAASC,IAAI,KAAK,EACnC,GAAGA,IADgC;AAEnCC,MAAAA,IAAI,EAAED,IAAI,CAACE,EAAL,KAAYP,IAAZ,GAAmBC,OAAnB,GAA6BI,IAAI,CAACC;AAFL,KAAL,CAAb,CAAnB;AAIAX,IAAAA,OAAO,CAACQ,UAAD,CAAP;AACD,GAPD;;AASA,QAAMK,SAAS,GAAGd,IAAI,CAACU,GAAL,CAASC,IAAI,IAAI;AACjCA,IAAAA,IAAI,CAACI,MAAL,CAAY,UAAUJ,IAAV,EAAgB;AAC1B,UAAIA,IAAI,CAACK,MAAL,KAAgBb,YAApB,EAAkC;AAAE,eAAO,KAAP;AAAc;;AAClD,UAAIQ,IAAI,CAACM,QAAL,KAAkBf,cAAtB,EAAsC;AAAE,eAAO,KAAP;AAAc;;AACtD,0BAAQ,QAAC,QAAD;AAAwB,QAAA,IAAI,EAAES,IAA9B;AAAoC,QAAA,QAAQ,EAAEP;AAA9C,SAAeO,IAAI,CAACE,EAApB;AAAA;AAAA;AAAA;AAAA,cAAR;AACD,KAJD;AAKD,GANiB,CAAlB;AAQA,sBACE;AAAK,IAAA,SAAS,EAAG,GAAEf,SAAU,EAA7B;AAAA,cACGE,IAAI,CAACkB,MAAL,GAAcJ,SAAd,GAA0B;AAD7B;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvBD;;KAAMf,Q;AAyBNA,QAAQ,CAACoB,SAAT,GAAqB;AACnBnB,EAAAA,IAAI,EAAEL,KAAK,CAACyB,UADO;AAEnBnB,EAAAA,OAAO,EAAEL,IAAI,CAACwB,UAFK;AAGnBlB,EAAAA,cAAc,EAAEN,IAAI,CAACwB,UAHF;AAInBjB,EAAAA,YAAY,EAAEP,IAAI,CAACwB;AAJA,CAArB;AAOA,eAAerB,QAAf","sourcesContent":["import React from 'react'\nimport { array, func } from 'prop-types'\n\nimport TaskData from '../TaskData'\n\nconst namespace = 'tasklist'\n\nconst TaskList = ({ list, setList, priorityFilter, statusFilter }) => {\n  const onChangeStatus = e => {\n    const { name, checked } = e.target\n    const updateList = list.map(item => ({\n      ...item,\n      done: item.id === name ? checked : item.done\n    }))\n    setList(updateList)\n  }\n\n  const todoItems = list.map(item => {\n    item.filter(function (item) {\n      if (item.status !== statusFilter) { return false }\n      if (item.priority !== priorityFilter) { return false }\n      return (<TaskData key={item.id} data={item} onChange={onChangeStatus} />)\n    })\n  })\n\n  return (\n    <div className={`${namespace}`}>\n      {list.length ? todoItems : 'No tasks'}\n    </div>\n  )\n}\n\nTaskList.propTypes = {\n  list: array.isRequired,\n  setList: func.isRequired,\n  priorityFilter: func.isRequired,\n  statusFilter: func.isRequired\n}\n\nexport default TaskList\n"]},"metadata":{},"sourceType":"module"}